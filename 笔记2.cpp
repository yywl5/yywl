//链表的重要性
//任意一个节点都可以和另一个节点产生关系
//typedef的学习
//typedef struct student{
//int sid;
//char name[100];
//char sex;
//}* std;
//int main(void){
//typedef int zhangsan;
//链表的定义
//离散存储[链表]
//链表彼此之间的存储是不连续的；
//什么是链表？1,不连续存储;2,通过指针相连;3,只有一个节点；
//首节点，尾节点，头指针，尾节点，尾指针，头结点；
//n个结点离散分配，彼此通过指针相连，每个节点只有一个前驱节点，每个节点只有一个后续节点；
//加头结点的目的主要是为了方便对链表的操作，头结点并不存放有效数据
//确定一个链表需要几个参数
//确定一个数组需要三个参数，有效元素的个数
//首地址，有效元素的个数，
//头结点，头结点可以通过首节点找到，尾节点必须，
//确定一个链表只需要一个参数
//一个结点的生成；
//struct Node
//{
//int data;数据域 
//struct Node * pNext;指针域 
//}NODE,*pNODE;//NODE等价于struct Node，pNODE等价于struct Node * 
//int main(void){
//return 0;
//}
//单链表，双链表每一个节点有两个指针域，循环链表
//循环链表每一个节点有两个指针域
//能通过任何一个节点找到其他节点
//算法：遍历，查找，清空，销毁，求长度，排序，删除节点，插入节点
//p->pNext=q; 
// r=p->pNext;
//p->pNext=q;
//q->pNext=r;
//
